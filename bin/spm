#!/usr/bin/env node

var path = require('path')
var fs = require('fs')
var os = require('os').type()
var child_process = require('child_process')


var commander = require('commander')
var program = require('../lib/terminal/program')
var color = require('../lib/terminal/color')
var plugin = require('../lib/core/plugin')

// register builtin command
var files = fs.readdirSync(path.join(__dirname, '..', 'lib', 'core'))
files.toString().split(',').forEach(function(f) {
  var name = f.replace('.js', '')
  var module = require('../lib/core/' + name)
  program.registerBuiltin(name, module.description)
})

// register extentions
plugin.trigger('registerCommand')


commander
  .version(require('../package').version)
  .usage('<command> [options]')


// sub command help
commander.on('--help', function() {
  if (program.builtins.length) {
    console.log('  ' + color.bold(color.green('Commands:')))
    console.log()
    program.builtins.forEach(function(cmd) {
      program.printHelp(cmd)
    })
  }

  if (program.extensions.length) {
    console.log()
    console.log('  ' + color.bold(color.blue('Extensions:')))
    console.log()
    program.extensions.forEach(function(cmd) {
      program.printHelp(cmd)
    })
  }
  console.log()
});

commander.parse(process.argv)

var args = process.argv.slice(3)
var subcmd = commander.args[0]

if (!subcmd) {
  process.stdout.write(commander.helpInformation());
  commander.emit('--help')
  process.exit()
}

if (subcmd == 'help') {
  var helpcmd = commander.args[1]
  if (!helpcmd) {
    process.stdout.write(commander.helpInformation());
    commander.emit('--help')
    process.exit()
  }

  var bin = executable(helpcmd) 
  child_process.exec(bin + ' --help', function(err, stdout) {
    if (err) {
      throw err;
    }
    process.stdout.write(stdout)
  })
} else {
  spawn(executable(subcmd), args, {stdio: 'inherit', customFds: [0, 1, 2]})
}


// helpers
// ----------
function spawn(command, args, options) {
  if (os === 'Windows_NT') {
    spawn = function(command, args, options) {
      args = ['/c', command].concat(args)
      command = 'cmd'
    }
  }
  return child_process.spawn(command, args, options)
}

function executable(subcmd) {
  // find executable
  var bin = 'spm-' + subcmd

  var local = path.join(__dirname, bin)
  if (fs.existsSync(local)) {
    bin = local
  } else {
    extensions.forEach(function(cmd) {
      if (subcmd === cmd.name) {
        bin = cmd.executable
      }
    })
  }
  return bin
}
