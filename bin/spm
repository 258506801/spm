#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var os = require('os');
var commander = require('commander');
require('colorful').colorful();
var spm = require('..');
var program = require('../lib/utils/program');
var spawn = require('win-fork');

if (!process.env.NODE_PATH) {
  console.log();
  if (process.env.SHELL === '/bin/zsh') {
    console.log('  Please set environment variable NODE_PATH in ~/.zshrc:');
  } else if (process.env.SHELL === '/bin/bash') {
    console.log('  Please set environment variable NODE_PATH in ~/.bashrc:');
  } else {
    console.log('  Please set environment variable NODE_PATH:');
  }
  console.log();

  var nodepath = __dirname.replace(/(\/|\\)spm(\/|\\)bin$/, '');
  if (/node_modules$/.test(nodepath) && !fs.existsSync(path.join(nodepath, '.bin'))) {
    if (os.platform() === 'win32') {
      console.log('    NODE_PATH=' + nodepath);
    } else {
      console.log('    export NODE_PATH=' + nodepath);
    }
  }
  console.log();
  process.exit();
}


commander.helpInformation = function() {
  return [
    '',
    '  Static Package Manager'.to.bold.color,
    '',
    '  Usage: ' + this._name + ' ' + this.usage(),
    '' + this.commandHelp(),
    '  Options:',
    '',
    '' + this.optionHelp().replace(/^/gm, '    '),
    '',
    ''
  ].join('\n');
};

commander
  .version(spm.version)
  .usage('<command> [options]');


var moduleCommands = {
  build: 'build a module',
  info: 'information of a module',
  search: 'search modules',
  install: 'install a module',
  publish: 'publish a module'
};

// sub command help
commander.on('--help', function() {
  console.log('  ' + 'System Commands:'.to.bold.magenta.color);
  console.log();
  program.printHelp(new program('plugin', 'plugin system for spm'));
  program.printHelp(new program('config', 'configuration for spm'));
  program.printHelp(new program('help', 'show help information'));
  console.log();

  console.log('  ' + 'Module Commands:'.to.bold.green.color);
  console.log();
  Object.keys(moduleCommands).forEach(function(key) {
    program.printHelp(new program(key, moduleCommands[key]));
  });
  console.log();

  var extensions = spm.plugin.plugins();
  if (extensions.length) {
    console.log();
    console.log('  ' + 'Plugin Commands:'.to.bold.blue.color);
    console.log();
    extensions.forEach(function(cmd) {
      program.printHelp(cmd);
    });
  }
  console.log();
});

commander.parse(process.argv);

var args = process.argv.slice(3);
var subcmd = commander.args[0];

if (!subcmd) {
  process.stdout.write(commander.helpInformation());
  commander.emit('--help');
  process.exit();
}

if (subcmd === 'help') {
  var helpcmd = commander.args[1];
  if (!helpcmd) {
    process.stdout.write(commander.helpInformation());
    commander.emit('--help');
    process.exit();
  }

  var bin = executable(helpcmd);
  if (bin) {
    spawn(bin, ['--help'], {stdio: 'inherit', customFds: [0, 1, 2]});
  }
} else {
  bin = executable(subcmd);
  if (bin) {
    spawn(bin, args, {stdio: 'inherit', customFds: [0, 1, 2]});
  }
}


// helpers
// ----------
function executable(subcmd) {
  // find executable
  var bin = 'spm-' + subcmd;

  var local = path.join(__dirname, bin);
  if (fs.existsSync(local)) {
    return local;
  }

  var commands = Object.keys(moduleCommands);

  // register extentions
  var extensions = spm.plugin.plugins();
  for (var i = 0; i < extensions.length; i++) {
    var cmd = extensions[i];
    if (subcmd === cmd.name) return cmd.binary;
    commands.push(cmd.name);
  }

  // guess commands
  commands = getSimilarCommands(subcmd, commands);
  console.log();
  console.log("  Can't find command: " + subcmd.to.cyan.color);
  console.log();
  if (commands.length) {
    console.log("  It may be a mistake of the similar commands:");
    console.log();
    commands.forEach(function(cmd) {
      console.log('    $', 'spm'.to.magenta.color, cmd.to.cyan.color);
    });
  }
  console.log();
  console.log("  It is not a built-in command, maybe it's a plugin.");
  console.log("  Try install this plugin: ");
  console.log();
  console.log('    $', 'spm plugin'.to.magenta.color, 'install', subcmd.to.cyan.color);
  console.log();
  return null;
}

function getLevenshteinSteps(s, t) {
  // ref: http://www.cxybl.com/html/bcyy/java/201107291632.html

  var n = s.length;
  var m = t.length;

  if (n === 0) return m;
  if (m === 0) return n;

  var d = [], i, j;

  for (i = 0; i <= n; i++) {
    d[i] = [];
    d[i][0] = i;
  }

  for (j = 0; j <= m; j++) {
    d[0][j] = j;
  }

  for (i = 1; i <= n; i++) {
    for (j = 1; j <= m; j++) {
      var cost = s[i] === t[j] ? 0 : 1;

      d[i][j] = Math.min(
        d[i - 1][j] + 1, // a deletion
        d[i][j - 1] + 1, // an insertion
        d[i - 1][j - 1] + cost  // a substitution
      );
    }
  }

  return d[n][m];
}

function getSimilarCommands(cmd, commands) {
  var _cache = {};
  var getPoint = function(s, t) {
    if (_cache[s + t]) {
      return _cache[s + t];
    }
    var min = Math.min(s.length, t.length);
    var max = Math.max(s.length, t.length);
    if (max >= 3 * min) return 0;
    var similar = 1 - getLevenshteinSteps(s, t) / max;
    _cache[s + t] = similar;
    return similar;
  };

  commands = commands.filter(function(key) {
    return getPoint(cmd, key) > 0.3;
  });

  return commands.sort(function(a, b) {
    return getPoint(cmd, b) - getPoint(cmd, a);
  });
}
