#!/usr/bin/env node

require('colorful').colorful();
var path = require('path');
var commander = require('commander');
var build = require('../lib/build');
var file = require('../lib/sdk/file');
var log = require('../lib/utils/log');

commander.usage('[options]');

commander
  .option('-I, --input-directory <dir>', 'input directory, default: current working directory')
  .option('-O, --output-directory <dir>', 'output directory, default: dist')
  .option('-f, --force', 'force option')
  .option('--include <include>', 'determine which files will be included, optional: self, relative, all, standalone')
  .option('--ignore <ignore>', 'determine which id will not be transported')
  .option('--skip <skip>', 'determine which id will not be parsed when analyse')
  .option('--idleading <idleading>', 'prefix of module name, default: {{name}}/{{version}}')
  .option('--with-deps', 'build package in dependencies')
  .option('--umd', 'wrap UMD with package name')
  .option('--zip', 'archive by zip')
  .option('--verbose', 'show more logging')
  .option('--no-color', 'disable colorful print')
  .option('--no-install', 'disable install')
  .option('--registry <url>', 'registry url of yuan server')
  .parse(process.argv);

if (commander.verbose) {
  log.level = 'debug';
}

log.config(commander);

console.log();
var cwd = path.join(process.cwd(), commander.inputDirectory || '');
var p = file.readJSON(path.join(cwd, 'package.json'));
if (!p || !p.spm) {
  log.error('miss', 'package.json or "spm" key');
  process.exit(2);
}

var info = ('build ' + p.name + '@' + p.version).to.magenta.color;
var begin = Date.now();
log.info('start', info);

var args = {
  dest: commander.outputDirectory,
  cwd: cwd,
  include: commander.include,
  ignore: commander.ignore,
  skip: commander.skip,
  idleading: commander.idleading,
  zip: commander.zip,
  force: commander.force,
  withDeps: commander.withDeps,
  install: commander.install,
  registry: commander.registry,
  umd: commander.umd
};

if (args.ignore) {
  args.ignore = args.ignore.split(',');
}

if (args.umd) {
  // use package name as global name for umd
  args.umd = p.name;
}

build(args, function(err) {
  if (err) {
    log.error('error', err.message);
    log.debug('error', err.stack);
    process.exit(1);
  }

  log.info('finish', info + showDiff(begin));
});

function showDiff(time) {
  var diff = Date.now() - time;
  return (' (' + diff + 'ms)').to.gray.color;
}
