#!/usr/bin/env node

var commander = require('commander')
var color = require('../lib/terminal/color')
var config = require('../lib/core/config')

commander.usage('[section.key] [value]')

commander
  .command('remove <section>')
  .description('remove a section')
  .action(config.remove)

commander
  .command('show')
  .description('show your spm configuration')
  .action(config.show)

commander
  .command('help')
  .description('show this help menu')
  .action(function() {
    process.stdout.write(commander.helpInformation());
    commander.emit('--help')
    process.exit()
  })


commander.on('--help', function() {
  console.log()
  console.log('  ' + color.green('Config:'))
  console.log()
  console.log('    Config file is located at ' + color.bold('~/.spm/spmrc') + ' with ini format.')
  console.log()
  console.log('    Overview of the config file:')
  console.log()
  console.log('    ' + color.magenta('[user]'))
  console.log('    ' + color.cyan('username') + ' = spm')
  console.log('    ' + color.cyan('password') + ' = 123')
  console.log()
  console.log('    ' + color.magenta('[source:spm]'))
  console.log('    ' + color.cyan('url') + ' = ' + color.underline('http://modules.spmjs.org'))
  console.log()
  console.log('    ' + color.magenta('[source:alipay]'))
  console.log('    ' + color.cyan('url') + ' = ' + color.underline('http://modules.alipay.im'))
  console.log()
  console.log()
  console.log('  ' + color.blue('Examples:'))
  console.log()
  console.log('    $ ' + color.magenta('spm config ') + color.cyan('user.username') + ' Firstname Lastname')
  console.log('    $ ' + color.magenta('spm config ') + color.cyan('source:spm.url') + ' http://modules.spmjs.org')
  console.log()
})

commander.parse(process.argv)

var subcmd = commander.args[0]
var lastcmd = commander.args[commander.args.length - 1]

if (!subcmd) {
  process.stdout.write(commander.helpInformation());
  commander.emit('--help')
  process.exit()
}

if (typeof subcmd === 'string' && subcmd.indexOf('.') !== -1 && commander.args.length > 1) {
  var value = commander.args.slice(1).join(' ')
  console.log()
  config.config(subcmd, value)
  console.log()
} else if (typeof subcmd === 'string' && typeof lastcmd === 'string') {
  console.log()
  console.log(color.red("  Can't find command: " +  subcmd))
  console.log()
}
