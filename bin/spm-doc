#!/usr/bin/env node

var commander = require('commander');
var spm = require('..');
var file = require('../lib/sdk/file');
var log = require('../lib/utils/log');
require('colorful').colorful();

commander.usage('[options]');

commander
  .option('-r, --registry <url>', 'registry url of yuan server')
  .option('-p, --port <port>', 'local server port, default: 8000')
  .option('-f, --force', 'force build without cache')
  .option('-v, --verbose', 'show more logging')
  .option('-q, --quiet', 'show less logging')
  .option('--no-color', 'disable colorful print')
  .option('clean', 'clean _site folder')
  .option('build', 'build documentation')
  .option('server', 'start a server for documentation')
  .option('watch', 'start a server of watching source')
  .option('publish', 'publish documentation for public');

commander.on('--help', function() {
  console.log('  Examples:'.to.bold.blue.color);
  console.log();
  console.log('    $ spm doc');
  console.log('    $ spm doc clean');
  console.log('    $ spm doc build');
  console.log('    $ spm doc build -f');
  console.log('    $ spm doc server');
  console.log('    $ spm doc watch');
  console.log('    $ spm doc watch --port 8080');
  console.log('    $ spm doc publish');
  console.log('    $ spm doc publish -r http://spm.alipay.im');
});

commander.parse(process.argv);

spm.log.config(commander);

if (!process.argv[2]) {
  commander.help();
}

var pkg = file.readJSON('package.json');
if (!pkg || !pkg.spm) {
  console.log();
  log.error('miss', 'package.json or "spm" key');
  process.exit(2);
}

console.log();

spm.doc(commander);
