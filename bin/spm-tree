#!/usr/bin/env node

var path = require('path');
var resolve = path.resolve;
var commander = require('commander');
var archy = require('archy');

require('colorful').colorful();
var spm = require('..');

commander
  .option('-d, --depth <n>', 'set the depth to <n>', Infinity)
  .option('--no-color', 'disable colorful print');


commander.on('--help', function() {
  console.log();
  console.log('  ' + 'Examples:'.to.bold.blue);
  console.log();
  console.log('   $', 'spm info'.to.magenta.color, 'jquery');
  console.log('   $', 'spm info'.to.magenta.color, 'arale/class');
  console.log('   $', 'spm info'.to.magenta.color, 'arale/class@1.0.0');
  console.log();
});

commander.parse(process.argv);

// color
spm.log.config(commander);

var file = spm.sdk.grunt.file;

if (!file.exists('package.json')) {
  console.log('   package.json missing.');
  process.exit(1);
}

console.log();
console.log(indent(archy(tree('package.json'))));

function tree(f, paths, depth) {
  depth = depth || 0;
  f = resolve(f);
  if (!file.exists(f)) {
    console.log('  can not find ' + path.relative(process.cwd(), f));
    console.log();
    return {};
  }
  var pkg = require(f);

  paths = paths || ['sea-modules'];

  var node = {};
  var title = '';
  if (pkg.family) {
    title = pkg.family + '/' + pkg.name;
  } else {
    title = pkg.name;
  }
  node.label = title.to.cyan + ('@' + pkg.version).to.grey;
  if (++depth > commander.depth) return node;

  if (pkg.spm && pkg.spm.alias) {
    var alias = pkg.spm.alias;

    var deps = Object.keys(alias).map(function(key) {
      var parsed = spm.sdk.module.parseIdentify(alias[key]);
      if (parsed && parsed.family && parsed.name && parsed.version) {
        return parsed;
      }
    }).filter(function(key) {
      return key;
    });
    node.nodes = deps.map(function(parsed) {
      return tree(lookup(paths, parsed));
    });
  }
  return node;
}

function lookup(paths, pkg) {
  var pkgfile;
  paths.some(function(f) {
    var fpath = path.join(f, pkg.family, pkg.name, pkg.version, 'package.json');
    if (file.exists(fpath));
    pkgfile = fpath;
    return true;
  });
  if (!pkgfile) {
    throw new Error('failed to resolve location of ' + pkg.family + '/' + pkg.name + '@' + pkg.version);
  }
  return pkgfile;
}

function indent(str) {
  return str.replace(/^/gm, '  ');
}
