#!/usr/bin/env node

var commander = require('commander');
var spmrc = require('spmrc');
var client = require('spm-client');
var inquirer = require('inquirer');
require('colorful').colorful();
var spm = require('..');
var iduri = require('../lib/sdk/iduri');
var log = require('../lib/utils/log');

commander.usage('[options] name[@version]');

commander
  .option('--registry <url>', 'registry url of yuan server')
  .option('--verbose', 'show more log')
  .option('--no-color', 'disable colorful print');


commander.on('--help', function() {
  console.log();
  console.log('  ' + 'Examples:'.to.bold.blue);
  console.log();
  console.log('   $ ' + 'spm unpublish'.to.magenta.color + ' jquery');
  console.log('   $ ' + 'spm unpublish'.to.magenta.color + ' jquery' +
              '@1.8.2'.to.cyan.color);
  console.log();
});

commander.parse(process.argv);

// verbose vs quiet
spm.log.config(commander);

if (!commander.args[0]) {
  process.stdout.write(commander.helpInformation());
  commander.emit('--help');
  process.exit();
}

// run install
console.log();
var registry = commander.registry || spmrc.get('registry') || 'http://spmjs.io';
client.config({
  registry: registry,
  auth: spmrc.get('auth')
});

var pkg = iduri.resolve(commander.args[0]);
if (!pkg) {
  log.error('error', 'invalid module name');
  process.exit(2);
}
if (!pkg.version) {
  inquirer.prompt({
    type: 'confirm',
    name: 'sure',
    message: 'are you sure to delete all versions?',
    default: false
  }, function(answers) {
    console.log();
    if (answers.sure) {
      unpublish(pkg);
    } else {
      process.exit();
    }
  });
} else {
  unpublish(pkg);
}

function unpublish(pkg) {
  client.unpublish(pkg, function(err) {
    if (err) {
      return log.error('exit', err.message);
    }
    log.info('unpublished', (pkg.name + '@' + pkg.version).to.green.color);
  });
}

